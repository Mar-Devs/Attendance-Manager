import os
import threading
import cv2
from deepface import DeepFace
import datetime
import csv

# Constants
START_TIME = datetime.time(8, 0)  # 8:00 AM
LATE_THRESHOLD = datetime.timedelta(minutes=45)
COOLDOWN_PERIOD = datetime.timedelta(seconds=30)  # 30-second cooldown

# Directory to store daily attendance logs (same as source folder)
log_directory = os.getcwd()  # Get the current working directory (script location)

# Employee logs to track clock-in, clock-out, and cooldown
employee_logs = {}

# Initialize camera
capture = cv2.VideoCapture(0, cv2.CAP_DSHOW)
capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

counter = 0
face_match = False
matched_file = None
lock = threading.Lock()

# Load Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")


def get_daily_log_filename():
    """
    Generates the log filename for the current day in the source folder.
    """
    current_date = datetime.datetime.now().strftime("%d-%m-%Y")  # Format date as day-month-year
    return os.path.join(log_directory, f"attendance_log_{current_date}.csv")


def write_to_csv(first_name, last_name, date, time, status):
    """
    Writes matched employee's details into the daily CSV file.
    """
    log_filename = get_daily_log_filename()
    file_exists = os.path.isfile(log_filename)

    with open(log_filename, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        # Write header only if the file is being created for the first time
        if not file_exists:
            writer.writerow(["First Name", "Last Name", "Date", "Time", "Status"])
        writer.writerow([first_name, last_name, date, time, status])
    print(f"Logged: {first_name} {last_name} - {date} {time} ({status})")


def calculate_status(scan_time):
    """
    Determine if the employee is late or not.
    """
    scan_datetime = datetime.datetime.combine(datetime.date.today(), scan_time)
    start_datetime = datetime.datetime.combine(datetime.date.today(), START_TIME)
    is_late = scan_datetime > start_datetime + LATE_THRESHOLD
    return "Late" if is_late else "On Time"


def parse_filename(filename):
    """
    Extracts the first and last name from the filename.
    """
    parts = filename.split('.')
    if len(parts) >= 2:
        first_name = parts[0]
        last_name = parts[1]
        return first_name, last_name
    return filename, ""


def find_image(camera_input_image):
    """
    Compares the input face with stored images in the directory.
    """
    global image_directory
    image_directory = os.getcwd()  # Use the current folder for employee images
    for filename in os.listdir(image_directory):
        file_path = os.path.join(image_directory, filename)      #slowing down the program

        if filename.endswith(('.png','.jpeg')):
            try:
                result = DeepFace.verify(camera_input_image, file_path)['verified'] 
                if result:
                    return filename  # Return the matched filename
            except Exception as e:
                print(f"Error comparing {filename}: {e}")
    return None

def check_face(image):
    """
    Processes the captured face to match with stored images.
    """
    global face_match, matched_file
    try:
        matched_file_temp = find_image(image)
        with lock:
            if matched_file_temp:
                face_match = True
                matched_file = matched_file_temp

                # Parse the first and last name from the filename
                first_name, last_name = parse_filename(matched_file_temp)

                # Get current time and date
                current_time = datetime.datetime.now()
                today_date = current_time.strftime("%d-%m-%Y")  # Format date as day-month-year

                # Check if employee has a log for today
                if first_name in employee_logs:
                    last_scan_time = employee_logs[first_name].get('last_scan', None)

                    # Enforce cooldown period
                    if last_scan_time and current_time - last_scan_time < COOLDOWN_PERIOD:
                        print(f"Skipping log for {first_name} {last_name}: Cooldown active.")
                        return

                    # Update last scan time
                    employee_logs[first_name]['last_scan'] = current_time

                    if employee_logs[first_name]['date'] == today_date:
                        # If clock-out hasn't been recorded, add it
                        if 'clock_out' not in employee_logs[first_name]:
                            employee_logs[first_name]['clock_out'] = current_time
                            status = "Clock Out"
                        else:
                            # Update clock-out time if it already exists
                            employee_logs[first_name]['clock_out'] = current_time
                            print(f"Updated clock-out for {first_name} {last_name} at {current_time.strftime('%H:%M:%S')}.")
                            return
                    else:
                        # New day, reset logs and clock-in
                        employee_logs[first_name] = {
                            'date': today_date,
                            'clock_in': current_time,
                            'last_scan': current_time
                        }
                        status = f"Clock In ({calculate_status(current_time.time())})"
                else:
                    # First scan of the day
                    employee_logs[first_name] = {
                        'date': today_date,
                        'clock_in': current_time,
                        'last_scan': current_time
                    }
                    status = f"Clock In ({calculate_status(current_time.time())})"

                # Log the entry to the CSV
                write_to_csv(first_name, last_name, today_date, current_time.strftime("%H:%M:%S"), status)
            else:
                face_match = False
                matched_file = None
                print("Employee not recognized.")
    except Exception as e:
        with lock:
            face_match = False
            matched_file = None
        print(f"Error during face check: {e}")




# Main loop
while True:
    success, image = capture.read()
    if success:
        # Convert the image to grayscale for face detection
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        if counter % 30 == 0:
            if len(faces) > 0:
                x, y, w, h = faces[0]  # Take the first detected face
                face_roi = image[y:y + h, x:x + w]
                threading.Thread(target=check_face, args=(face_roi,)).start()
            else:
                with lock:
                    face_match = False
                    matched_file = None

        counter += 1

        # Draw rectangles around detected faces
        for (x, y, w, h) in faces:
            color = (0, 255, 0) if face_match else (0, 0, 255)  # Green for match, red for no match
            cv2.rectangle(image, (x, y), (x + w, y + h), color, 3)

        # Display match status
        with lock:
            if face_match and matched_file:
                first_name, last_name = parse_filename(matched_file)
                cv2.putText(image, f"MATCH: {first_name} {last_name}", (20, 450),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:
                cv2.putText(image, "NO MATCH!", (20, 450), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        # Display the video feed
        cv2.imshow("Face Matching", image)

    key = cv2.waitKey(1)
    if key == ord("q"):
        break

# Release the camera and close windows
capture.release()
cv2.destroyAllWindows()
